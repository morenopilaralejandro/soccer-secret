//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSettings/TouchControlActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControlActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControlActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControlActions"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""2e0f4305-bfcd-427e-877b-02a1cf40cc62"",
            ""actions"": [
                {
                    ""name"": ""TouchPrimary"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e24b1bcf-e2f1-4111-830e-86b283c07b51"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPressed"",
                    ""type"": ""Button"",
                    ""id"": ""1787ca08-16e7-45df-b09e-98bdbc245350"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchTap"",
                    ""type"": ""Button"",
                    ""id"": ""75ecc2d7-4ee6-4302-9c8e-2976043722e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e6eae31d-584f-4c31-aeee-a84b566e519f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4606a4ef-30dc-42fe-9ecd-4cfec05c0a68"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4af89460-c8fa-4c0c-9354-7b87b665cd5a"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ec0e43e-12ae-4009-8fee-d04bac4d0b2c"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13393bad-220d-48a9-8b80-15b4cb8f9195"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_TouchPrimary = m_Touch.FindAction("TouchPrimary", throwIfNotFound: true);
        m_Touch_TouchPressed = m_Touch.FindAction("TouchPressed", throwIfNotFound: true);
        m_Touch_TouchTap = m_Touch.FindAction("TouchTap", throwIfNotFound: true);
        m_Touch_TouchPosition = m_Touch.FindAction("TouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_TouchPrimary;
    private readonly InputAction m_Touch_TouchPressed;
    private readonly InputAction m_Touch_TouchTap;
    private readonly InputAction m_Touch_TouchPosition;
    public struct TouchActions
    {
        private @TouchControlActions m_Wrapper;
        public TouchActions(@TouchControlActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPrimary => m_Wrapper.m_Touch_TouchPrimary;
        public InputAction @TouchPressed => m_Wrapper.m_Touch_TouchPressed;
        public InputAction @TouchTap => m_Wrapper.m_Touch_TouchTap;
        public InputAction @TouchPosition => m_Wrapper.m_Touch_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @TouchPrimary.started += instance.OnTouchPrimary;
            @TouchPrimary.performed += instance.OnTouchPrimary;
            @TouchPrimary.canceled += instance.OnTouchPrimary;
            @TouchPressed.started += instance.OnTouchPressed;
            @TouchPressed.performed += instance.OnTouchPressed;
            @TouchPressed.canceled += instance.OnTouchPressed;
            @TouchTap.started += instance.OnTouchTap;
            @TouchTap.performed += instance.OnTouchTap;
            @TouchTap.canceled += instance.OnTouchTap;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @TouchPrimary.started -= instance.OnTouchPrimary;
            @TouchPrimary.performed -= instance.OnTouchPrimary;
            @TouchPrimary.canceled -= instance.OnTouchPrimary;
            @TouchPressed.started -= instance.OnTouchPressed;
            @TouchPressed.performed -= instance.OnTouchPressed;
            @TouchPressed.canceled -= instance.OnTouchPressed;
            @TouchTap.started -= instance.OnTouchTap;
            @TouchTap.performed -= instance.OnTouchTap;
            @TouchTap.canceled -= instance.OnTouchTap;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnTouchPrimary(InputAction.CallbackContext context);
        void OnTouchPressed(InputAction.CallbackContext context);
        void OnTouchTap(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
}
